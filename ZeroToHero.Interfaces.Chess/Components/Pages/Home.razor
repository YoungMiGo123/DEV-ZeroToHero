@page "/"
@using ZeroToHero.Interfaces.Chess.Models
@using ZeroToHero.Interfaces.Chess.Services.Implementations
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<div class="container">
    <div class="text-center">
        <br />
        <h3>Chess</h3>
        <hr />
        <br />
    </div>

    <div class="row">
        <div class="col-3">
            <div class="row">
                <h4>Game Status And Controls</h4>
                <div class="col-4">
                    <button type="submit" class="btn btn-primary" @onclick="() => ResetGame()">Quit</button>
                </div>
                <div class="col-4">
                    <button type="submit" class="btn btn-primary" @onclick="() => UndoMove()">Undo</button>
                </div>
            </div>

            <br />
            <div class="mt-2">
                <PlayerCard Player="@_gameManager.CurrentPlayer" Color="@(_gameManager.CurrentPlayer.Color == ChessPieceColor.White ? "#3498db" : "#e74c3c")" />
            </div>
            <br />
            @if (_showMessage)
            {
                <div class="row">
                    <div class="@_messageClassName" role="alert">
                        @_message
                    </div>
                </div>
            }
            @if (_isGameOver)
            {
                <div class="row">
                    <div class="alert alert-success" role="alert">
                        Game Over
                    </div>
                </div>
                <div>

                </div>
            }
        </div>
        <div class="col-9">
            <table class="chessboard">
                @{
                    List<char> files = new List<char>() { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H' };
                }
                <thead>
                    <tr>
                        <th></th>
                        @foreach (var file in files)
                        {
                            <th class="chessboard-label">@file</th>
                        }
                    </tr>
                </thead>

                @for (int rank = 8; rank >= 1; rank--)
                {
                    <tr>
                        <td class="chessboard-label">@rank</td>
                        @foreach (var (file,index) in files.Select((value, index) => (value, index)))
                        {
                            var position = $"{file}{rank}";
                            var tile = _gameManager.Board.GetTile(position);

                            <td class="chessboard-tile @(tile.IsDark ? "dark" : "light")  @(tile.IsSelected ? "selectedSquare" : "")"
                                @onclick="@(() => HandleClick(position))">

                                @if (tile.Piece != null)
                                {
                                    <img src="@tile.Piece.ImagePath" alt="@tile.Piece.Type" />
                                }

                            </td>
                        }
                    </tr>
                }
            </table>
        </div>

    </div>

    <div class="row">
        <br/>
        <br />
    </div>
</div>
@code {
    private GameManager _gameManager = new GameManager();
    private bool _showMessage { get; set; }
    private string _message { get; set; }
    private string _messageClassName { get; set; }
    private bool _hasSelectedPiece { get; set; }
    private bool _isGameOver { get; set; }
    private Player _winner { get; set; }
    private ChessPieceColor OppositionColor()
    {
        return _gameManager.Opposition.Color;
    }
    public void HandleClick(string position)
    {
        _hasSelectedPiece = _gameManager.Board.Squares.Any(x => x.IsSelected);
        if (_hasSelectedPiece)
        {
            MovePiece(position);
        }
        else
        {
            ClickPiece(position);
        }
    }

    public void ClickPiece(string position)
    {
        _showMessage = false;
        _gameManager.Board.DeselectAllTiles();
        if (!_gameManager.Board.GetTile(position).IsOccupied)
        {
            _showMessage = true;
            _message = "Select a piece before moving";
            _messageClassName = "alert alert-danger";
            return;
        }
        _gameManager.Board.SelectTile(position);
    }

    public void MovePiece(string position)
    {
        _showMessage = false;
        var moveResponse = _gameManager.MovePiece(position);

        if (!moveResponse.IsSuccessful)
        {
            _showMessage = true;
            _message = moveResponse?.Message ?? "Select a piece before moving";
            _messageClassName = "alert alert-danger";
            return;
        }
        var KingInDangerStates = new List<string>() { "Checkmate", "Stalemate", "Check" };

        if(KingInDangerStates.Contains(moveResponse?.Message ?? string.Empty))
        {
            _showMessage = true;
            _message = moveResponse?.Message ?? "King in danger";
            _messageClassName = "alert alert-warning";
        }

        if (_gameManager.IsGameOver())
        {
            _gameManager.UpdateScores();
            _isGameOver = true;
            _winner = _gameManager.GetWinner();
        }
    }

    private void UndoMove()
    {
        _showMessage = false;
        var undoSuccess = _gameManager.UndoMove();
        if (!undoSuccess)
        {
            _showMessage = true;
            _message = "No moves to undo";
            _messageClassName = "alert alert-danger";
        }
    }

    private void ResetGame()
    {
        _gameManager.ResetGame();
    }
}